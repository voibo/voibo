syntax = "proto3";

option go_package = "github.com/SpiralMindJP/whisper-server/pb";

package spiralmind.vf.whisper;

//import "google/protobuf/timestamp.proto";

message RawAudio {
  uint32 channels    = 1; 
  uint32 sample_rate = 2;
  bytes  data        = 3;
}

message WAVAudio {
  bytes data = 1;
}

message Audio {
}

enum DivisionMode {
  DIVISION_MODE_NONE    = 0; // 分割しない。
  DIVISION_MODE_FIXED   = 1; // 固定位置で分割。
  DIVISION_MODE_SILENCE = 2; // 無音部分で分割。
}

message TranscribeOptions {
  bool     translate  = 1; // true を指定すると、ソース言語から英語への翻訳を行う。
  string   language   = 2; // ソース言語。
  int32    max_length = 3; // セグメントの最大文字数。
}

message DivideOptions {
  DivisionMode division_mode   = 1; // 分割モード。
  double       segment_length  = 2; // 分割するセグメントの長さ。
  double       division_margin = 3; // 分割のマージン。_mode が SPLIT_SILENCE でない場合は無視される。split_length の位置を中心に、この値の範囲で無音を検索する。
  double       silence_level   = 4; // 無音であると認識するデシベル値。
  double       silence_length  = 5; // 無音であると認識する長さ。
}

message TranscribeRequest {
  string            id             = 1; // リクエストID。リクエストに対応するレスポンスに同じ値が設定される。
  double            timestamp      = 2; // タイムスタンプ。テキストデータのタイムスタンプは、この値でオフセットされる。
  TranscribeOptions options        = 3; // オプション。
  DivideOptions     divide_options = 4; // 分割オプション。

  oneof audio {
    RawAudio raw = 11;
    WAVAudio wav = 12;
  }
}

message Text {
  double timestamp = 1;
  double length    = 2;
  string text      = 3;
}

message Segment {
  double        timestamp = 1;
  double        length    = 2;
  repeated Text texts     = 3;
}

message TranscribeSuccess {
  repeated Segment segments = 1;
}

message TranscribeError {
  string message = 1;
  string reason  = 2;
}

message TranscribeResponse {
  string id = 1;

  oneof result {
    TranscribeSuccess success = 11;
    TranscribeError   error   = 12;
  }
}

service FrontendService {
  rpc Transcribe(stream TranscribeRequest) returns (stream TranscribeResponse) {}
}
